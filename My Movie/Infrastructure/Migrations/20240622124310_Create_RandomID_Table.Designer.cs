// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using My_Movie;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace My_Movie.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240622124310_Create_RandomID_Table")]
    partial class Create_RandomID_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("My_Movie.Domain.Model.RandomID", b =>
                {
                    b.Property<int>("random_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("random_id"));

                    b.Property<bool>("isUse")
                        .HasColumnType("boolean");

                    b.HasKey("random_id");

                    b.ToTable("RandomIds");
                });

            modelBuilder.Entity("My_Movie.Model.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<List<string>>("Authors")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("creatAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("isbn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("pageCount")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("My_Movie.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator",
                            createAt = new DateTime(2024, 6, 22, 12, 43, 9, 745, DateTimeKind.Utc).AddTicks(6399),
                            updatedAt = new DateTime(2024, 6, 22, 12, 43, 9, 745, DateTimeKind.Utc).AddTicks(6400)
                        });
                });

            modelBuilder.Entity("My_Movie.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("lastLogged")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 22, 12, 43, 9, 745, DateTimeKind.Utc).AddTicks(6268),
                            LoginName = "admin",
                            Name = "Admin",
                            Password = "123",
                            UpdatedAt = new DateTime(2024, 6, 22, 12, 43, 9, 745, DateTimeKind.Utc).AddTicks(6269),
                            lastLogged = new DateTime(2024, 6, 22, 12, 43, 9, 745, DateTimeKind.Utc).AddTicks(6268)
                        });
                });

            modelBuilder.Entity("My_Movie.Model.UserBooks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("My_Movie.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 22, 12, 43, 9, 745, DateTimeKind.Utc).AddTicks(6417),
                            RoleId = 1,
                            UpdatedAt = new DateTime(2024, 6, 22, 12, 43, 9, 745, DateTimeKind.Utc).AddTicks(6418),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("My_Movie.Model.UserBooks", b =>
                {
                    b.HasOne("My_Movie.Model.Book", "Book")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Movie.Model.User", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_Movie.Model.UserRole", b =>
                {
                    b.HasOne("My_Movie.Model.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Movie.Model.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_Movie.Model.Book", b =>
                {
                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("My_Movie.Model.Role", b =>
                {
                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("My_Movie.Model.User", b =>
                {
                    b.Navigation("UserBooks");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
